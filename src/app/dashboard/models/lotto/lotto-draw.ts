export interface LottoDetail {
  id?: string;       // âœ… Keep as is (UUID)
  tId?: string;      // âœ… Shortened from ticketId
  w?: number;        // âœ… Shortened from wins
  win?: boolean;     // âœ… Shortened from isWinner
  cDt: number;       // âœ… Timestamp instead of string (createdDt)
  mDt: number;       // âœ… Timestamp instead of string (modifyDt)
  cmb: string;       // âœ… Shortened from betCombi
  amt: number;       // âœ… Shortened from betAmount
  typ: string;       // âœ… Shortened from betType
  st: string;        // âœ… Shortened from status
  mBy?: string | null; // âœ… Shortened from modifyBy
  cBy?: string | null; // âœ… Shortened from createdBy
  uId?: string | null; // âœ… Shortened from userId
}
export interface LottoDraw {
  id?: string;       // âœ… Keep as is (UUID)
  dId: number;       // âœ… Shortened from drawId
  winCmb: string;    // âœ… Shortened from betWinCombi
  winStr: number;    // âœ… Shortened from betStraightWin
  winRam: number;    // âœ… Shortened from betRambleWin
  dDt: number;       // âœ… Timestamp instead of string (drawDate)
  dTm: string;       // âœ… Shortened from drawTime
  dTyp: string;      // âœ… Shortened from drawType
  details: LottoDetail[]; // âœ… Keep as is (nested array)
  cDt: number;       // âœ… Timestamp instead of string (createdDt)
  mDt: number;       // âœ… Timestamp instead of string (modifyDt)
  mBy?: string | null; // âœ… Shortened from modifyBy
  cBy?: string | null; // âœ… Shortened from createdBy
  uId?: string | null; // âœ… Shortened from userId
}
export interface LottoDrawTransaction {
  id?: string;       // âœ… Keep as is (UUID)
  tId?: string;      // âœ… Shortened from ticketId
  dTyp: string;      // âœ… Shortened from drawType
  cmb: string;       // âœ… Shortened from combination
  tgt: number;       // âœ… Shortened from target
  ram: number;       // âœ… Shortened from ramble
  grs: number;       // âœ… Shortened from gross
  agt: string;       // âœ… Shortened from agent
  dDt: string;        // âœ… Timestamp instead of string (date)
  st?: string;       // âœ… Shortened from status
  mBy?: string | null; // âœ… Shortened from modifyBy
  cBy?: string | null; // âœ… Shortened from createdBy
  cDt: number;       // âœ… Timestamp instead of string (createdDt)
  mDt: number;       // âœ… Timestamp instead of string (modifyDt)
  uId?: string | null; // âœ… Shortened from userId
}
export interface LottoDrawDashboard {
  dTyp: string;      // âœ… Shortened from drawType
  bet: number;       // âœ… Total bet amount
  hits: number;      // âœ… Total hits (count of wins not equal to 0)
  com: string;       // âœ… Shortened from commission
  kabig: number;     // âœ… Gross bet amount minus total wins (can't be negative)
}
export interface LottoDrawRole {
  id: string;        // âœ… Keep as is (UUID)
  rId: string;       // âœ… Shortened from roleId
  rDesc: string;     // âœ… Shortened from roleDesc
  st: string;        // âœ… Shortened from status
  uId: string;       // âœ… Shortened from uid (User ID)
  cTm: number;       // âœ… Timestamp instead of string (createTime)
  uTm: number;       // âœ… Timestamp instead of string (updateTime)
}
export interface Combo {
  id: number;      // âœ… Keep as is (UUID or numeric ID)
  tId: number;     // ðŸ”¥ Shortened from ticketId
  cmb: string;     // ðŸ”¥ Shortened from combination
  amt: string;     // ðŸ”¥ Shortened from amount
  typ: 'T' | 'R';  // ðŸ”¥ Shortened from type
}
